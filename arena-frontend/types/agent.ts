// TypeScript interfaces for Claude Arena agent components
// Generated by React Arena Specialist - Level 4 Master

export type AgentLevel = 1 | 2 | 3 | 4 | 5;
export type AgentRank = 'Novice' | 'Apprentice' | 'Specialist' | 'Master' | 'Grandmaster';
export type XPBrand = number & { readonly brand: unique symbol };
export type UserIDBrand = string & { readonly brand: unique symbol };
export type AchievementKeyBrand = string & { readonly brand: unique symbol };

export interface Achievement {
  id: AchievementKeyBrand;
  name: string;
  description: string;
  icon: string;
  unlockedAt: Date;
  xpReward: XPBrand;
  rarity: 'common' | 'rare' | 'epic' | 'legendary';
}

export interface PerformanceMetric {
  label: string;
  value: number;
  maxValue: number;
  unit: string;
  trend: 'up' | 'down' | 'stable';
  color: string;
}

export interface AgentProfile {
  id: UserIDBrand;
  name: string;
  level: AgentLevel;
  currentXP: XPBrand;
  xpToNextLevel: XPBrand;
  totalXP: XPBrand;
  specialization: string;
  rank: AgentRank;
  avatar?: string;
  joinedAt: Date;
  lastActive: Date;
  achievements: Achievement[];
  recentAchievements: Achievement[];
  performanceMetrics: PerformanceMetric[];
  isOnline: boolean;
}

export interface LeaderboardEntry {
  position: number;
  agent: AgentProfile;
  xpGainedToday: XPBrand;
  xpGainedThisWeek: XPBrand;
  levelProgress: number; // 0-1
}

export interface XPNotification {
  id: string;
  type: 'xp_gained' | 'level_up' | 'achievement_unlocked';
  agentId: UserIDBrand;
  message: string;
  xpAmount?: XPBrand;
  newLevel?: AgentLevel;
  achievement?: Achievement;
  timestamp: Date;
}

export interface LeaderboardFilters {
  category: 'overall' | 'daily' | 'weekly' | 'monthly';
  specialization?: string;
  level?: AgentLevel;
}

export interface WebSocketMessage {
  type: 'xp_update' | 'level_up' | 'achievement_unlock' | 'agent_online' | 'agent_offline';
  payload: any;
  agentId: UserIDBrand;
  timestamp: Date;
}

// Component Props Types
export interface AgentProfileCardProps {
  agent: AgentProfile;
  showFullMetrics?: boolean;
  onViewDetails?: (agentId: UserIDBrand) => void;
  className?: string;
}

export interface AgentLeaderboardProps {
  entries: LeaderboardEntry[];
  filters: LeaderboardFilters;
  onFilterChange: (filters: LeaderboardFilters) => void;
  isLoading?: boolean;
  className?: string;
}

export interface AgentXPTrackerProps {
  agentId: UserIDBrand;
  onXPUpdate?: (notification: XPNotification) => void;
  enableToasts?: boolean;
  className?: string;
}

// Utility functions for type branding
export const createXP = (value: number): XPBrand => value as XPBrand;
export const createUserID = (value: string): UserIDBrand => value as UserIDBrand;
export const createAchievementKey = (value: string): AchievementKeyBrand => value as AchievementKeyBrand;